// use std::collections::HashMap;

// // 定义正则表达式的基本结构
// #[derive(Debug, Clone)]
// enum Regex {
//     Char(char),         // 一个字符
//     Concat(Box<Regex>, Box<Regex>), // 连接操作
//     Alter(Box<Regex>, Box<Regex>),  // 并集操作
//     Star(Box<Regex>),   // 闭包操作
// }

// // 定义 NFA 状态
// #[derive(Debug)]
// #[derive(Clone)]
// struct NFAState {
//     transitions: HashMap<Option<char>, Vec<usize>>, // 转换表，使用 Option<char> 处理 epsilon 转换
//     is_accepting: bool, // 是否为接受状态
// }

// // 定义 NFA 结构
// #[derive(Debug)]
// struct NFA {
//     states: Vec<NFAState>, // 所有状态
//     start_state: usize,    // 起始状态
//     accept_state: usize,   // 接受状态
// }

// impl NFA {
//     fn new() -> Self {
//         NFA {
//             states: Vec::new(),
//             start_state: 0,
//             accept_state: 0,
//         }
//     }

//     // 添加一个状态
//     fn add_state(&mut self, is_accepting: bool) -> usize {
//         let state_id = self.states.len();
//         self.states.push(NFAState {
//             transitions: HashMap::new(),
//             is_accepting,
//         });
//         state_id
//     }

//     // 添加转换
//     fn add_transition(&mut self, from: usize, to: usize, symbol: Option<char>) {
//         self.states[from]
//             .transitions
//             .entry(symbol)
//             .or_insert_with(Vec::new)
//             .push(to);
//     }
// }

// impl Regex {
//     // 将正则表达式转换为 NFA
//     fn to_nfa(&self) -> NFA {
//         let mut nfa = NFA::new();
//         match self {
//             Regex::Char(c) => {
//                 // 单个字符的 NFA
//                 let start = nfa.add_state(false);
//                 let accept = nfa.add_state(true);
//                 nfa.add_transition(start, accept, Some(*c));
//                 nfa.start_state = start;
//                 nfa.accept_state = accept;
//             }
//             Regex::Concat(r1, r2) => {
//                 // 连接操作的 NFA
//                 let nfa1 = r1.to_nfa();
//                 let nfa2 = r2.to_nfa();
//                 let start = nfa1.start_state;
//                 let accept = nfa2.accept_state;

//                 // 合并两个 NFA
//                 nfa.states = [nfa1.states, nfa2.states].concat();
//                 nfa.add_transition(nfa1.accept_state, nfa2.start_state, None);
//                 nfa.start_state = start;
//                 nfa.accept_state = accept;
//             }
//             Regex::Alter(r1, r2) => {
//                 // 并集操作的 NFA
//                 let nfa1 = r1.to_nfa();
//                 let nfa2 = r2.to_nfa();
//                 let start = nfa.add_state(false);
//                 let accept = nfa.add_state(true);

//                 // 合并两个 NFA，并添加新的起始和接受状态
//                 nfa.states = [vec![NFAState {
//                     transitions: HashMap::new(),
//                     is_accepting: false,
//                 }], nfa1.states, nfa2.states, vec![NFAState {
//                     transitions: HashMap::new(),
//                     is_accepting: true,
//                 }]].concat();

//                 nfa.add_transition(start, nfa1.start_state, None);
//                 nfa.add_transition(start, nfa2.start_state, None);
//                 nfa.add_transition(nfa1.accept_state, accept, None);
//                 nfa.add_transition(nfa2.accept_state, accept, None);
//                 nfa.start_state = start;
//                 nfa.accept_state = accept;
//             }
//             Regex::Star(r) => {
//                 // 闭包操作的 NFA
//                 let nfa_inner = r.to_nfa();
//                 let start = nfa.add_state(false);
//                 let accept = nfa.add_state(true);

//                 // 添加转换：新起始状态 -> 内部 NFA 的起始状态，或直接到接受状态
//                 nfa.add_transition(start, nfa_inner.start_state, None);
//                 nfa.add_transition(start, accept, None);

//                 // 内部 NFA 的接受状态 -> 内部 NFA 的起始状态，或直接到新的接受状态
//                 nfa.add_transition(nfa_inner.accept_state, nfa_inner.start_state, None);
//                 nfa.add_transition(nfa_inner.accept_state, accept, None);

//                 nfa.states = [vec![NFAState {
//                     transitions: HashMap::new(),
//                     is_accepting: false,
//                 }], nfa_inner.states, vec![NFAState {
//                     transitions: HashMap::new(),
//                     is_accepting: true,
//                 }]].concat();

//                 nfa.start_state = start;
//                 nfa.accept_state = accept;
//             }
//         }
//         nfa
//     }
// }

// fn main() {
//     // 构建一个简单的正则表达式 a(b|c)*
//     let regex = Regex::Concat(
//         Box::new(Regex::Char('a')),
//         Box::new(Regex::Star(Box::new(Regex::Alter(
//             Box::new(Regex::Char('b')),
//             Box::new(Regex::Char('c')),
//         )))),
//     );

//     // 将正则表达式转换为 NFA
//     let nfa = regex.to_nfa();

//     // 打印 NFA 状态
//     println!("NFA 状态数: {}", nfa.states.len());
//     for (i, state) in nfa.states.iter().enumerate() {
//         println!(
//             "状态 {}: 接受状态: {}, 转换: {:?}",
//             i, state.is_accepting, state.transitions
//         );
//     }
// }

#[derive(Debug, PartialEq)]
enum Token {
    Identifier(String),
    Keyword(String),
    Integer(i64),
    Float(f64),
    StringLiteral(String),
    Plus,
    Minus,
    Star,
    Slash,
    Percent,
    Assign,
    Colon,
    Ampersand,
    Lifetime(String),
    Eq,
    NotEq,
    LT,
    GT,
    LEq,
    GEq,
    LParen,
    RParen,
    LBrace,
    RBrace,
    LBracket,
    RBracket,
    Hash,
    Comma,
    Semicolon,
    Comment(String),
    Whitespace,
    Unknown(char),
    EOF
}

const KEYWORDS: &[&str] = &[
    "let", "fn", "if", "else", "while", "for", "return", "true", "false",
    "enum", "struct", "impl", "const"
];

struct Lexer<'a> {
    input: &'a str,
    position: usize,
    line: usize,
    column: usize,
}

impl<'a> Lexer<'a> {
    fn new(input: &'a str) -> Self {
        Lexer {
            input,
            position: 0,
            line: 1,
            column: 1,
        }
    }

    fn next_char(&self) -> Option<char> {
        self.input.chars().nth(self.position)
    }

    fn advance(&mut self) {
        if let Some(current_char) = self.next_char() {
            self.position += 1;
            if current_char == '\n' {
                self.line += 1;
                self.column = 1;
            } else {
                self.column += 1;
            }
        }
    }

    fn tokenize(&mut self) -> Vec<Token> {
        let mut tokens = Vec::new();

        while let Some(current_char) = self.next_char() {
            match current_char {
                // 跳过空白字符
                ' ' | '\t' | '\r' | '\n' => {
                    self.advance();
                    tokens.push(Token::Whitespace);
                }
                // 解析标识符或关键字
                'a'..='z' | 'A'..='Z' | '_' => {
                    let identifier = self.collect_identifier();
                    if KEYWORDS.contains(&identifier.as_str()) {
                        tokens.push(Token::Keyword(identifier));
                    } else {
                        tokens.push(Token::Identifier(identifier));
                    }
                }
                // 解析数字
                '0'..='9' => {
                    let number = self.collect_number();
                    tokens.push(Token::Number(number));
                }
                // 解析字符串字面量
                '"' => {
                    let string_literal = self.collect_string();
                    tokens.push(Token::StringLiteral(string_literal));
                }
                // 解析运算符和标点符号
                '+' => {
                    tokens.push(Token::Plus);
                    self.advance();
                }
                '-' => {
                    self.advance();
                    if let Some(next_char) = self.next_char() {
                        if next_char.is_alphabetic() {
                            let lifetime = self.collect_lifetime();
                            tokens.push(Token::Lifetime(lifetime));
                        } else {
                            tokens.push(Token::Minus);
                        }
                    } else {
                        tokens.push(Token::Minus);
                    }
                }
                '*' => {
                    tokens.push(Token::Star);
                    self.advance();
                }
                '/' => {
                    self.advance();
                    if self.next_char() == Some('/') {
                        let comment = self.collect_comment();
                        tokens.push(Token::Comment(comment));
                    } else {
                        tokens.push(Token::Slash);
                    }
                }
                '%' => {
                    tokens.push(Token::Percent);
                    self.advance();
                }
                '=' => {
                    self.advance();
                    if self.next_char() == Some('=') {
                        self.advance();
                        tokens.push(Token::Eq);
                    } else {
                        tokens.push(Token::Assign);
                    }
                }
                '!' => {
                    self.advance();
                    if self.next_char() == Some('=') {
                        self.advance();
                        tokens.push(Token::NotEq);
                    } else {
                        tokens.push(Token::Unknown('!'));
                    }
                }
                '<' => {
                    self.advance();
                    if self.next_char() == Some('=') {
                        self.advance();
                        tokens.push(Token::LessEq);
                    } else {
                        tokens.push(Token::LessThan);
                    }
                }
                '>' => {
                    self.advance();
                    if self.next_char() == Some('=') {
                        self.advance();
                        tokens.push(Token::GreaterEq);
                    } else {
                        tokens.push(Token::GreaterThan);
                    }
                }
                '(' => {
                    tokens.push(Token::LParen);
                    self.advance();
                }
                ')' => {
                    tokens.push(Token::RParen);
                    self.advance();
                }
                '{' => {
                    tokens.push(Token::LBrace);
                    self.advance();
                }
                '}' => {
                    tokens.push(Token::RBrace);
                    self.advance();
                }
                '[' => {
                    tokens.push(Token::LBracket);
                    self.advance();
                }
                ']' => {
                    tokens.push(Token::RBracket);
                    self.advance();
                }
                '#' => {
                    tokens.push(Token::Hash);
                    self.advance();
                }
                ',' => {
                    tokens.push(Token::Comma);
                    self.advance();
                }
                ';' => {
                    tokens.push(Token::Semicolon);
                    self.advance();
                }
                ':' => {
                    tokens.push(Token::Colon);
                    self.advance();
                }
                '&' => {
                    tokens.push(Token::Ampersand);
                    self.advance();
                }
                '\'' => {
                    let lifetime = self.collect_lifetime();
                    tokens.push(Token::Lifetime(lifetime));
                }
                _ => {
                    tokens.push(Token::Unknown(current_char));
                    self.advance();
                }
            }
        }

        tokens.push(Token::EndOfFile);
        tokens
    }

    // 收集标识符或关键字
    fn collect_identifier(&mut self) -> String {
        let mut identifier = String::new();
        while let Some(current_char) = self.next_char() {
            if current_char.is_alphanumeric() || current_char == '_' {
                identifier.push(current_char);
                self.advance();
            } else {
                break;
            }
        }
        identifier
    }

    // 收集数字
    fn collect_number(&mut self) -> i64 {
        let mut number = String::new();
        while let Some(current_char) = self.next_char() {
            if current_char.is_numeric() {
                number.push(current_char);
                self.advance();
            } else {
                break;
            }
        }
        number.parse::<i64>().unwrap()
    }

    // 收集字符串字面量
    fn collect_string(&mut self) -> String {
        let mut string_literal = String::new();
        self.advance(); // 跳过起始的双引号
        while let Some(current_char) = self.next_char() {
            if current_char == '"' {
                self.advance(); // 跳过结束的双引号
                break;
            } else {
                string_literal.push(current_char);
                self.advance();
            }
        }
        string_literal
    }

    // 收集注释
    fn collect_comment(&mut self) -> String {
        let mut comment = String::new();
        self.advance(); // 跳过第二个斜杠
        while let Some(current_char) = self.next_char() {
            if current_char == '\n' {
                break;
            } else {
                comment.push(current_char);
                self.advance();
            }
        }
        comment
    }

    // 收集生命周期标识符
    fn collect_lifetime(&mut self) -> String {
        let mut lifetime = String::new();
        lifetime.push('\''); // 添加起始的单引号
        self.advance();
        while let Some(current_char) = self.next_char() {
            if current_char.is_alphabetic() {
                lifetime.push(current_char);
                self.advance();
            } else {
                break;
            }
        }
        lifetime
    }
}



fn main() {
    let input = r#"
        #[derive(Debug, PartialEq)]
        enum Token {
            Identifier(String),
            Keyword(String),
            Number(i64),
            StringLiteral(String),
            Plus,
            Minus,
            Star,
            Slash,
            Percent,
            Assign,
            Eq,
            NotEq,
            LessThan,
            GreaterThan,
            LessEq,
            GreaterEq,
            LParen,
            RParen,
            LBrace,
            RBrace,
            LBracket,
            RBracket,
            Hash,
            Comma,
            Semicolon,
            Comment(String),
            Whitespace,
            Unknown(char),
            EndOfFile,
        }

        const KEYWORDS: &[&str] = &["let", "fn", "if", "else", "while", "for", "return", "true", "false", "enum", "struct", "impl", "const"];

        struct Lexer<'a> {
            input: &'a str,
            position: usize,
            line: usize,
            column: usize,
        }

        impl<'a> Lexer<'a> {
            // Lexer implementation...
        }
    "#;

    let mut lexer = Lexer::new(input);
    let tokens = lexer.tokenize();

    for token in tokens {
        if token == Token::Whitespace {
            continue
        }
        if let Token::Unknown(_) = token {
            println!("{:?}", token);
        }
    }
}
